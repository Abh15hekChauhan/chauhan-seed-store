<?php

/**
 * @file
 * Allow administrator defined options for block classes.
 */

use Drupal\Component\Utility\Xss;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_help().
 */
function block_class_select_help($route_name, RouteMatchInterface $route_match) {
  if ($route_name == 'help.page.block_class_select') {
    $text = file_get_contents(__DIR__ . '/README.md');
    if (!Drupal::moduleHandler()->moduleExists('markdown')) {
      return '<pre>' . $text . '</pre>';
    }
    else {
      /** @var \Drupal\markdown\PluginManager\ParserManagerInterface $parser_manager */
      $parser_manager = \Drupal::service('plugin.manager.markdown.parser');
      $parser = $parser_manager->getDefaultParser([
        'render_strategy' => ['type' => 'none'],
      ]);
      return $parser->parse($text);
    }
  }
  return NULL;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function block_class_select_form_block_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  /** @var \Drupal\block\BlockInterface $block */
  $block = $form_state->getFormObject()->getEntity();

  // Get config.
  $config = \Drupal::config('block_class_select.settings');
  $label = $config->get('label');
  $description = $config->get('description');
  $multiple = $config->get('multiple');

  // No predefined classes available, so don't alter form.
  $options = $config->get('classes');
  if (empty($options)) {
    return;
  }

  // Add new form element to handle select options, so we can leave the default
  // block class field alone.
  $form['third_party_settings']['block_class_select']['selected_classes'] = [
    '#type' => 'select',
    '#title' => ($label ? Xss::filter($label) : t('Select Block Class(es)')),
    '#description' => ($description ? Xss::filter($description) : t('Select one or more classes.')),
    '#multiple' => $multiple,
    '#options' => $options,
    '#default_value' => preg_split('/\s+/', $block->getThirdPartySetting('block_class', 'classes')),
    '#empty_option' => t('-- None --'),
    '#empty_value' => '',
    '#access' => \Drupal::currentUser()
      ->hasPermission('select block class select classes'),
  ];

  // Only allow users with proper permissions to add classes in the default
  // textfield.
  $form['third_party_settings']['block_class']['classes']['#access'] = \Drupal::currentUser()
    ->hasPermission('enter classes in block class textfield');

  // Alter block class textfield default values to strip out our predefined
  // options.
  $block_class_classes = preg_split('/\s+/', $block->getThirdPartySetting('block_class', 'classes'));
  // Create new array with keys and values identical.
  $saved_classes = [];
  foreach ($block_class_classes as $value) {
    $class = trim($value);
    $saved_classes[$class] = $class;
  }
  $block_class = array_diff_key($saved_classes, $options);
  $form['third_party_settings']['block_class']['classes']['#default_value'] = implode(' ', $block_class);

  // Rearrange callbacks so this runs earlier.
  $callbacks = $form['actions']['submit']['#submit'];
  array_unshift($callbacks, 'block_class_select_form_alter_submit');
  $form['actions']['submit']['#submit'] = $callbacks;
}

/**
 * Submit handler for the block configuration form.
 */
function block_class_select_form_alter_submit(&$form, FormStateInterface $form_state) {
  $config = \Drupal::config('block_class_select.settings');
  $multiple = $config->get('multiple');

  if ($multiple) {
    // Get classes out of the array created by allowing multiple values in the
    // select element - block class is expecting a string.
    $classes = implode(' ', $form_state->getValue([
      'third_party_settings',
      'block_class_select',
      'selected_classes',
    ]));
  }
  else {
    $classes = $form_state->getValue([
      'third_party_settings',
      'block_class_select',
      'selected_classes',
    ]);
  }

  if (empty($form_state->getValue([
    'third_party_settings',
    'block_class',
    'classes',
  ]))) {
    $form_state->setValue([
      'third_party_settings',
      'block_class',
      'classes',
    ], $classes);
  }
  else {
    $form_state->setValue([
      'third_party_settings',
      'block_class',
      'classes',
    ], $form_state->getValue([
      'third_party_settings',
      'block_class',
      'classes',
    ]) . ' ' . $classes);
  }
}
